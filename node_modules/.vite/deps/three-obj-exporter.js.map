{
  "version": 3,
  "sources": ["../../three-obj-exporter/index.js"],
  "sourcesContent": ["var THREE = require( 'three' );\n\n/**\n* @author mrdoob / http://mrdoob.com/\n*/\n\nfunction OBJExporter () {};\n\nOBJExporter.prototype = {\n\n   constructor: OBJExporter,\n\n   parse: function ( object ) {\n\n       var output = '';\n\n       var indexVertex = 0;\n       var indexVertexUvs = 0;\n       var indexNormals = 0;\n\n       var vertex = new THREE.Vector3();\n       var normal = new THREE.Vector3();\n       var uv = new THREE.Vector2();\n\n       var i, j, l, m, face = [];\n\n       var parseMesh = function ( mesh ) {\n\n           var nbVertex = 0;\n           var nbNormals = 0;\n           var nbVertexUvs = 0;\n\n           var geometry = mesh.geometry;\n\n           var normalMatrixWorld = new THREE.Matrix3();\n\n           if ( geometry instanceof THREE.Geometry ) {\n\n               geometry = new THREE.BufferGeometry().setFromObject( mesh );\n\n           }\n\n           if ( geometry instanceof THREE.BufferGeometry ) {\n\n               // shortcuts\n               var vertices = geometry.getAttribute( 'position' );\n               var normals = geometry.getAttribute( 'normal' );\n               var uvs = geometry.getAttribute( 'uv' );\n               var indices = geometry.getIndex();\n\n               // name of the mesh object\n               output += 'o ' + mesh.name + '\\n';\n\n               // vertices\n\n               if( vertices !== undefined ) {\n\n                   for ( i = 0, l = vertices.count; i < l; i ++, nbVertex++ ) {\n\n                       vertex.x = vertices.getX( i );\n                       vertex.y = vertices.getY( i );\n                       vertex.z = vertices.getZ( i );\n\n                       // transfrom the vertex to world space\n                       vertex.applyMatrix4( mesh.matrixWorld );\n\n                       // transform the vertex to export format\n                       output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n                   }\n\n               }\n\n               // uvs\n\n               if( uvs !== undefined ) {\n\n                   for ( i = 0, l = uvs.count; i < l; i ++, nbVertexUvs++ ) {\n\n                       uv.x = uvs.getX( i );\n                       uv.y = uvs.getY( i );\n\n                       // transform the uv to export format\n                       output += 'vt ' + uv.x + ' ' + uv.y + '\\n';\n\n                   }\n\n               }\n\n               // normals\n\n               if( normals !== undefined ) {\n\n                   normalMatrixWorld.getNormalMatrix( mesh.matrixWorld );\n\n                   for ( i = 0, l = normals.count; i < l; i ++, nbNormals++ ) {\n\n                       normal.x = normals.getX( i );\n                       normal.y = normals.getY( i );\n                       normal.z = normals.getZ( i );\n\n                       // transfrom the normal to world space\n                       normal.applyMatrix3( normalMatrixWorld );\n\n                       // transform the normal to export format\n                       output += 'vn ' + normal.x + ' ' + normal.y + ' ' + normal.z + '\\n';\n\n                   }\n\n               }\n\n               // faces\n\n               if( indices !== null ) {\n\n                   for ( i = 0, l = indices.count; i < l; i += 3 ) {\n\n                       for( m = 0; m < 3; m ++ ){\n\n                           j = indices.getX( i + m ) + 1;\n\n                           face[ m ] = ( indexVertex + j ) + '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + '/' + ( indexNormals + j );\n\n                       }\n\n                       // transform the face to export format\n                       output += 'f ' + face.join( ' ' ) + \"\\n\";\n\n                   }\n\n               } else {\n\n                   for ( i = 0, l = vertices.count; i < l; i += 3 ) {\n\n                       for( m = 0; m < 3; m ++ ){\n\n                           j = i + m + 1;\n\n                           face[ m ] = ( indexVertex + j ) + '/' + ( uvs ? ( indexVertexUvs + j ) : '' ) + '/' + ( indexNormals + j );\n\n                       }\n\n                       // transform the face to export format\n                       output += 'f ' + face.join( ' ' ) + \"\\n\";\n\n                   }\n\n               }\n\n           } else {\n\n               console.warn( 'THREE.OBJExporter.parseMesh(): geometry type unsupported', geometry );\n\n           }\n\n           // update index\n           indexVertex += nbVertex;\n           indexVertexUvs += nbVertexUvs;\n           indexNormals += nbNormals;\n\n       };\n\n       var parseLine = function( line ) {\n\n           var nbVertex = 0;\n\n           var geometry = line.geometry;\n           var type = line.type;\n\n           if ( geometry instanceof THREE.Geometry ) {\n\n               geometry = new THREE.BufferGeometry().setFromObject( line );\n\n           }\n\n           if ( geometry instanceof THREE.BufferGeometry ) {\n\n               // shortcuts\n               var vertices = geometry.getAttribute( 'position' );\n               var indices = geometry.getIndex();\n\n               // name of the line object\n               output += 'o ' + line.name + '\\n';\n\n               if( vertices !== undefined ) {\n\n                   for ( i = 0, l = vertices.count; i < l; i ++, nbVertex++ ) {\n\n                       vertex.x = vertices.getX( i );\n                       vertex.y = vertices.getY( i );\n                       vertex.z = vertices.getZ( i );\n\n                       // transfrom the vertex to world space\n                       vertex.applyMatrix4( line.matrixWorld );\n\n                       // transform the vertex to export format\n                       output += 'v ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z + '\\n';\n\n                   }\n\n               }\n\n               if ( type === 'Line' ) {\n\n                   output += 'l ';\n\n                   for ( j = 1, l = vertices.count; j <= l; j++ ) {\n\n                       output += ( indexVertex + j ) + ' ';\n\n                   }\n\n                   output += '\\n';\n\n               }\n\n               if ( type === 'LineSegments' ) {\n\n                   for ( j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1 ) {\n\n                       output += 'l ' + ( indexVertex + j ) + ' ' + ( indexVertex + k ) + '\\n';\n\n                   }\n\n               }\n\n           } else {\n\n               console.warn('THREE.OBJExporter.parseLine(): geometry type unsupported', geometry );\n\n           }\n\n           // update index\n           indexVertex += nbVertex;\n\n       };\n\n       object.traverse( function ( child ) {\n\n           if ( child instanceof THREE.Mesh ) {\n\n               parseMesh( child );\n\n           }\n\n           if ( child instanceof THREE.Line ) {\n\n               parseLine( child );\n\n           }\n\n       } );\n\n       return output;\n\n   }\n\n};\n\nmodule.exports = OBJExporter;\n"],
  "mappings": "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",
  "names": []
}
